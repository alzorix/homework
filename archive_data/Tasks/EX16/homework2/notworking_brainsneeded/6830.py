''' 	(№ 6830) (А. Богданов) Обозначим частное от деления натурального числа a на натуральное число b как a // b, а остаток как a%b.
 Алгоритм вычисления функции F(n), где n – натуральное число, задан следующими соотношениями:

F(n) = n, если n < 2;
F(n) = F(n // 2)  + F(n % 2), если n ≥ 2.

Определите количество значений n < 2^30, для которых функция F(n) = 27. '''
#
# F = dict()
# F[1] = 1
# F[0] = 0 # n - натуральное число согласно условию,НО 2 % 2 =0. Если мы исключаем все двойки,то n//2 будет выводить чётное число и выбивать ошибку.
# # Если убрать и (n//2)% 2 == 0,то  5 будет выдавать ошибку. Если переберать с 0,то перебор очень долгий
#
# for n in range(3,2**30,2):
#     s = (n//2)
#     if s % 2 != 0:
#         F[n] = (F[n//2] + F[n% 2])
#
#
#
# print("90%")
# c = 0
# for i in F.items():
#     if i == 27:
#         c+=1
# print(c)

from  functools import lru_cache
@lru_cache()
def F(n):
    if n<2:
        return n
    else:
        return F(n // 2) + F(n % 2)
c=0
for n in range(1,2**30):
    try:
        if F(n) ==27:
            c+=1
    except:
        None
print(c) # По обычному тоже не работает